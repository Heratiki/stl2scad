"""
Visualization tools for STL to SCAD conversion verification.

This module provides functions for generating visualizations to compare
STL and SCAD models, including side-by-side views, cross-sections,
and difference highlighting.
"""

import os
import tempfile
from pathlib import Path
from typing import Dict, Any, Optional, Union, List, Tuple

from ..converter import run_openscad, get_openscad_path


def generate_comparison_visualization(
    stl_file: Union[str, Path],
    scad_file: Union[str, Path],
    output_dir: Union[str, Path],
    views: Optional[List[str]] = None
) -> Dict[str, Path]:
    """
    Generate comparison visualizations between STL and SCAD models.
    
    Args:
        stl_file: Path to the STL file
        scad_file: Path to the SCAD file
        output_dir: Directory to save visualization files
        views: List of views to generate ('perspective', 'top', 'front', 'side', 'comparison')
        
    Returns:
        Dict[str, Path]: Dictionary of generated visualization files
        
    Raises:
        FileNotFoundError: If input files not found
        RuntimeError: If visualization generation fails
    """
    stl_path = Path(stl_file)
    scad_path = Path(scad_file)
    output_path = Path(output_dir)
    
    # Validate input files
    if not stl_path.exists():
        raise FileNotFoundError(f"STL file not found: {stl_file}")
    if not scad_path.exists():
        raise FileNotFoundError(f"SCAD file not found: {scad_file}")
    
    # Create output directory
    output_path.mkdir(exist_ok=True, parents=True)
    
    # Set default views if not provided
    if views is None:
        views = ['perspective', 'top', 'front', 'side', 'comparison']
    
    # Get OpenSCAD path
    openscad_path = get_openscad_path()
    
    # Create visualization script
    vis_script = f"""
    // STL to SCAD Comparison Visualization
    // Generated by stl2scad verification system
    
    // Parameters
    show_stl = true;
    show_scad = true;
    highlight_diff = false;
    cross_section = false;
    cross_section_z = 0;
    
    // Colors
    stl_color = [0.3, 0.5, 0.9, 0.7];  // Blue, semi-transparent
    scad_color = [0.9, 0.3, 0.3, 0.7];  // Red, semi-transparent
    
    // STL model
    module show_stl_model() {{
        if (show_stl) {{
            color(stl_color) import("{stl_path.absolute()}");
        }}
    }}
    
    // SCAD model
    module show_scad_model() {{
        if (show_scad) {{
            color(scad_color) include("{scad_path.absolute()}");
        }}
    }}
    
    // Side by side view
    module side_by_side() {{
        translate([-50, 0, 0]) show_stl_model();
        translate([50, 0, 0]) show_scad_model();
    }}
    
    // Overlay view
    module overlay() {{
        show_stl_model();
        show_scad_model();
    }}
    
    // Cross-section view
    module cross_section_view() {{
        intersection() {{
            union() {{
                show_stl_model();
                show_scad_model();
            }}
            translate([0, 0, cross_section_z])
            cube([1000, 1000, 0.1], center=true);
        }}
    }}
    
    // Select view based on parameter
    if ($vpt == undef) {{
        side_by_side();
    }}
    """
    
    # Write script to file
    vis_file = output_path / "comparison.scad"
    with open(vis_file, 'w') as f:
        f.write(vis_script)
    
    # Generate visualizations
    visualizations = {}
    
    # Camera positions for different views
    camera_settings = {
        'perspective': {'eye': [120, 120, 80], 'center': [0, 0, 0], 'up': [0, 0, 1]},
        'top': {'eye': [0, 0, 200], 'center': [0, 0, 0], 'up': [0, 1, 0]},
        'front': {'eye': [0, -200, 0], 'center': [0, 0, 0], 'up': [0, 0, 1]},
        'side': {'eye': [200, 0, 0], 'center': [0, 0, 0], 'up': [0, 0, 1]},
    }
    
    for view_name in views:
        output_file = output_path / f"{view_name}_view.png"
        
        if view_name == 'comparison':
            # Generate side-by-side comparison with multiple angles
            angles = [0, 45, 90, 135, 180, 225, 270, 315]
            for angle in angles:
                angle_file = output_path / f"comparison_{angle}.png"
                camera = f"0,0,0,0,0,{angle},200"
                
                success = run_openscad(
                    f"Comparison view {angle}°",
                    ["--camera", camera, "--preview=throwntogether", "--autocenter", "--viewall", "-o", str(angle_file), str(vis_file)],
                    str(output_path / f"comparison_{angle}.log"),
                    openscad_path
                )
                
                if success and angle_file.exists():
                    if angle == 0:  # Use the first angle as the main comparison view
                        visualizations[view_name] = angle_file
                else:
                    print(f"Warning: Failed to generate {view_name} view at angle {angle}")
        else:
            # Generate standard view
            if view_name in camera_settings:
                camera = camera_settings[view_name]
                eye_str = f"{camera['eye'][0]},{camera['eye'][1]},{camera['eye'][2]}"
                center_str = f"{camera['center'][0]},{camera['center'][1]},{camera['center'][2]}"
                up_str = f"{camera['up'][0]},{camera['up'][1]},{camera['up'][2]}"
                camera_str = f"{eye_str},{center_str},{up_str}"
                
                success = run_openscad(
                    f"{view_name.capitalize()} view",
                    ["--camera", camera_str, "--preview=throwntogether", "--autocenter", "--viewall", "-o", str(output_file), str(vis_file)],
                    str(output_path / f"{view_name}_view.log"),
                    openscad_path
                )
                
                if success and output_file.exists():
                    visualizations[view_name] = output_file
                else:
                    print(f"Warning: Failed to generate {view_name} view")
    
    # Generate cross-section views at different heights
    model_height = 0  # This should be determined from the model
    cross_sections = 5  # Number of cross-sections
    
    for i in range(cross_sections):
        # Calculate cross-section height (from 10% to 90% of model height)
        height_percent = 0.1 + (0.8 * i / (cross_sections - 1))
        height = model_height * height_percent
        
        # Create cross-section script
        cross_section_file = output_path / f"cross_section_{i+1}.scad"
        with open(cross_section_file, 'w') as f:
            f.write(vis_script)
            f.write(f"\ncross_section = true;\n")
            f.write(f"cross_section_z = {height};\n")
            f.write(f"cross_section_view();\n")
        
        # Generate cross-section image
        output_file = output_path / f"cross_section_{i+1}.png"
        success = run_openscad(
            f"Cross-section {i+1}",
            ["--preview=throwntogether", "--autocenter", "--viewall", "-o", str(output_file), str(cross_section_file)],
            str(output_path / f"cross_section_{i+1}.log"),
            openscad_path
        )
        
        if success and output_file.exists():
            visualizations[f"cross_section_{i+1}"] = output_file
    
    return visualizations


def generate_verification_report_html(
    verification_result: Dict[str, Any],
    visualizations: Dict[str, Path],
    output_file: Union[str, Path]
) -> None:
    """
    Generate an HTML report for verification results with visualizations.
    
    Args:
        verification_result: Verification result dictionary
        visualizations: Dictionary of visualization files
        output_file: Path to save the HTML report
    """
    # Extract key information from verification result
    passed = verification_result.get('passed', False)
    stl_file = verification_result.get('stl_file', '')
    scad_file = verification_result.get('scad_file', '')
    comparison = verification_result.get('comparison', {})
    report = verification_result.get('report', {})
    
    # Format metrics for display
    metrics_html = ""
    
    # Volume comparison
    if 'volume' in comparison:
        vol = comparison['volume']
        metrics_html += f"""
        <div class="metric-card">
            <h3>Volume Comparison</h3>
            <table>
                <tr><td>STL Volume:</td><td>{vol['stl']:.2f} mm³</td></tr>
                <tr><td>SCAD Volume:</td><td>{vol['scad']:.2f} mm³</td></tr>
                <tr><td>Difference:</td><td>{vol['difference']:.2f} mm³</td></tr>
                <tr><td>Difference %:</td><td class="{get_status_class(vol['difference_percent'], 5)}">{vol['difference_percent']:.2f}%</td></tr>
            </table>
        </div>
        """
    
    # Surface area comparison
    if 'surface_area' in comparison:
        area = comparison['surface_area']
        metrics_html += f"""
        <div class="metric-card">
            <h3>Surface Area Comparison</h3>
            <table>
                <tr><td>STL Surface Area:</td><td>{area['stl']:.2f} mm²</td></tr>
                <tr><td>SCAD Surface Area:</td><td>{area['scad']:.2f} mm²</td></tr>
                <tr><td>Difference:</td><td>{area['difference']:.2f} mm²</td></tr>
                <tr><td>Difference %:</td><td class="{get_status_class(area['difference_percent'], 5)}">{area['difference_percent']:.2f}%</td></tr>
            </table>
        </div>
        """
    
    # Bounding box comparison
    if 'bounding_box' in comparison:
        bbox = comparison['bounding_box']
        bbox_html = "<div class='metric-card'><h3>Bounding Box Comparison</h3><table>"
        
        for dim in ['width', 'height', 'depth']:
            if dim in bbox:
                dim_data = bbox[dim]
                bbox_html += f"""
                <tr>
                    <td>{dim.capitalize()}:</td>
                    <td>STL: {dim_data['stl']:.2f} mm</td>
                    <td>SCAD: {dim_data['scad']:.2f} mm</td>
                    <td>Diff: {dim_data['difference']:.2f} mm</td>
                    <td class="{get_status_class(dim_data['difference_percent'], 2)}">{dim_data['difference_percent']:.2f}%</td>
                </tr>
                """
        
        bbox_html += "</table></div>"
        metrics_html += bbox_html
    
    # Failures section
    failures_html = ""
    if 'failures' in report and report['failures']:
        failures_html = "<div class='failures'><h3>Verification Failures</h3><ul>"
        for failure in report['failures']:
            failures_html += f"<li>{failure['message']}</li>"
        failures_html += "</ul></div>"
    
    # Visualizations section
    vis_html = "<div class='visualizations'><h2>Visualizations</h2>"
    
    # Main comparison view
    if 'perspective' in visualizations:
        vis_html += f"""
        <div class="vis-card main-view">
            <h3>3D Perspective View</h3>
            <img src="{visualizations['perspective'].name}" alt="Perspective View">
        </div>
        """
    
    # Comparison views
    if 'comparison' in visualizations:
        vis_html += f"""
        <div class="vis-card">
            <h3>Side-by-Side Comparison</h3>
            <img src="{visualizations['comparison'].name}" alt="Comparison View">
            <p>Blue: Original STL, Red: Converted SCAD</p>
        </div>
        """
    
    # Standard views
    standard_views_html = "<div class='standard-views'><h3>Standard Views</h3><div class='view-grid'>"
    for view in ['top', 'front', 'side']:
        if view in visualizations:
            standard_views_html += f"""
            <div class="view-item">
                <h4>{view.capitalize()} View</h4>
                <img src="{visualizations[view].name}" alt="{view.capitalize()} View">
            </div>
            """
    standard_views_html += "</div></div>"
    vis_html += standard_views_html
    
    # Cross-section views
    cross_sections_html = "<div class='cross-sections'><h3>Cross-Sections</h3><div class='view-grid'>"
    cross_section_keys = [k for k in visualizations.keys() if k.startswith('cross_section_')]
    for key in sorted(cross_section_keys):
        cross_sections_html += f"""
        <div class="view-item">
            <h4>Cross-Section {key.split('_')[-1]}</h4>
            <img src="{visualizations[key].name}" alt="{key}">
        </div>
        """
    cross_sections_html += "</div></div>"
    vis_html += cross_sections_html
    
    vis_html += "</div>"
    
    # Create HTML report
    html = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>STL to SCAD Verification Report</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
            }}
            header {{
                text-align: center;
                margin-bottom: 30px;
                padding-bottom: 20px;
                border-bottom: 1px solid #eee;
            }}
            .status {{
                display: inline-block;
                padding: 5px 10px;
                border-radius: 4px;
                font-weight: bold;
            }}
            .passed {{
                background-color: #d4edda;
                color: #155724;
            }}
            .failed {{
                background-color: #f8d7da;
                color: #721c24;
            }}
            .warning {{
                background-color: #fff3cd;
                color: #856404;
            }}
            .good {{
                color: #155724;
            }}
            .metrics {{
                display: flex;
                flex-wrap: wrap;
                gap: 20px;
                margin-bottom: 30px;
            }}
            .metric-card {{
                flex: 1;
                min-width: 300px;
                padding: 15px;
                border-radius: 8px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                background-color: #f8f9fa;
            }}
            .metric-card h3 {{
                margin-top: 0;
                border-bottom: 1px solid #ddd;
                padding-bottom: 10px;
            }}
            table {{
                width: 100%;
                border-collapse: collapse;
            }}
            td {{
                padding: 5px;
            }}
            .failures {{
                margin: 20px 0;
                padding: 15px;
                border-radius: 8px;
                background-color: #f8d7da;
                color: #721c24;
            }}
            .visualizations {{
                margin-top: 40px;
            }}
            .vis-card {{
                margin-bottom: 30px;
                padding: 15px;
                border-radius: 8px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                background-color: #f8f9fa;
            }}
            .main-view {{
                text-align: center;
            }}
            .main-view img {{
                max-width: 100%;
                max-height: 400px;
            }}
            .view-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                gap: 20px;
                margin-top: 20px;
            }}
            .view-item {{
                text-align: center;
            }}
            .view-item img {{
                max-width: 100%;
                border-radius: 4px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            }}
            footer {{
                margin-top: 50px;
                text-align: center;
                font-size: 0.9em;
                color: #777;
            }}
        </style>
    </head>
    <body>
        <header>
            <h1>STL to SCAD Verification Report</h1>
            <p>
                <strong>Status:</strong> 
                <span class="status {passed_class(passed)}">{passed_text(passed)}</span>
            </p>
            <p>
                <strong>STL File:</strong> {os.path.basename(stl_file)}<br>
                <strong>SCAD File:</strong> {os.path.basename(scad_file)}
            </p>
        </header>
        
        <section>
            <h2>Metrics Comparison</h2>
            <div class="metrics">
                {metrics_html}
            </div>
            {failures_html}
        </section>
        
        {vis_html}
        
        <footer>
            <p>Generated by STL2SCAD Verification System</p>
        </footer>
    </body>
    </html>
    """
    
    # Write HTML to file
    with open(output_file, 'w') as f:
        f.write(html)


def passed_class(passed: bool) -> str:
    """Return CSS class based on passed status."""
    return "passed" if passed else "failed"


def passed_text(passed: bool) -> str:
    """Return text based on passed status."""
    return "PASSED" if passed else "FAILED"


def get_status_class(value: float, threshold: float) -> str:
    """Return CSS class based on value compared to threshold."""
    abs_value = abs(value)
    if abs_value < threshold / 2:
        return "good"
    elif abs_value < threshold:
        return "warning"
    else:
        return "failed"